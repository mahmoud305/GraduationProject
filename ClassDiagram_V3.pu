@startuml class-diagram


package UserUI {
    interface UserView {
        +login()
        +showProfile()
        +updateProfile()
    }

    class OrganizationView {
        +Register()
        +createRoute()
        +createPath()
        +createTrip()
        +createPassenger()
        +showAllPassengers()
        ' include suspend, activate and delete
        +showMyRoutes()
        +payMyRoutes()
        +showMyComplaints()
        +ShowAllTrips()
    }

    class AdminView {
        +createDriver()
        +showDrivers()
        ' include suspend, activate and delete
        +showOrganizations()
        ' include suspend, activate and delete
        +showComplaints()
        ' includes handle them
        +showExcuses()
        ' includes handle them
    }

    class PassengerView {
        +showRoutes()
        ' includes show paths, trips and book them
        +showMyBookings()
        +showMyComplaints()
        ' includes making new ones
    }

    class DriverView {
        +createExcuse()
        +showMyExcuses()
    }
}

package RouteUI {
    class TripView {
        +showInfo()
        +showBuses()
    }

    class PathView {
        +showInfo()
        +showTrips()
    }

    class RouteView {
        +showInfo()
        +showPaths()
    }
}

package ReportUI {
    interface ReportView {
        +showInfo()
        +create()
        +ShowAll()
        ' represents the form filled to create a report
    }

    class ComplaintView {
        
    }

    class ExcuseView {
    }
}

package ReportManagement {
    interface ReportServices {
        +store(ReportModel):void
        +retrieve():list<ReportModel>
    }

    class ComplaintServices {
       
    }

    class ExcuseServices {
    }
}

package UserManagement {
    interface UserServices {
        +updateProfile(UserModel): void
        +login(UserModel): void
    }

    class AdminServices {
        +createDriver(DriverModel): DriverModel
        +suspendDriver(DriverID): boolean
        +deleteDriver(DriverID): boolean
        +deleteOrganization(OrganizationID): boolean
        +handleComplaint(UserID): void
        +handleExcuse(DriverID): void
        +assignDriver(DriverID): boolean
    }

    class DriverServices {
        +makeExcuse(DriverID): void
    }

    class PassengerServices {
        +joinTrip(PassengerID): void
        'change his seat or change the bus'
        +modifyBooking(PassengerID): void
        +cancelBooking(PassengerID): void
        +makeComplaint(PassengerID): void
    }

    class OrganizationServices {
        +createOrganization(OrganizationModel):void
        +createRoute(RouteModel): void
        +modifyRoute(RouteModel): void
        +deleteRoute(RouteID): void
        +createPassenger(PassengerModel): void
        +suspendPassenger(PassengerID): void
        +activatePassenger(PassengerID): void
        +deletePassenger(PassengerID): void
        'we are decide that the pay for trip not route !!!!!'
        +payForTrip(): boolean
        +createTrip(TripModel): boolean
        +showAllTrips():List<TripModel>
    }
}

package RouteManagement {
    /'Each route contains multiple paths
    Each route contains source and destination only
    Each path contains multiple stops
    Each path contains multiple trips
    Each trip has one start time'/
    class RouteServices {
        +getTrip(): TripModel
        +getAllTrips(): List<TripModel>
    }

    class TripServices {
        -bus: BusModel
        -startTime: datetime
        +assignDriver(DriverID): boolean
        +isCompleted(TripID): boolean
    }

    class PathServices {
        +getAllStops(): List<StopModel>
        +addStops(StopModel): boolean
    }
}

package BookingManagement {
    class BookingServices {
        +bookTrip(TripID,PassengerID)
        +cancelBooking(TripID,PassengerID)
    }
}

package UserDataModel {
    class UserModel {
        -name:string
        -email:string
        -password:string
    }

    class AdminModel {
        -userID:int
    }

    class PassengerModel {
        -phoneNumber: string
        -userID: int
        -complaintsID: int
        -bookingIDs: List<int>
        ' booked by the passenger
    }

    class OrganizationModel {
        -userID:int
        -passengersID: List<int>
        -routesID: List<int>
    }

    class DriverModel {
        -userID: int
        -nationalID: string
        -drivingLicense: ImageIcon
        -driverImg: string
        -tripIDs: List<int>
        -busID: int
        -excuses:Excuse
    }

    interface IUserDataAccess {
        +add(UserModel): boolean
        +update(UserModel): boolean
        +delete(UserModel): boolean
        +get(int): UserModel
    }

    interface IAdminDataAccess {
        +add(AdminModel): boolean
        +update(AdminModel): boolean
        +delete(AdminModel): boolean
        +get(int): AdminModel
    }

    interface IDriverDataAccess {
        +add(DriverModel): boolean
        +update(DriverModel): boolean
        +delete(DriverModel): boolean
        +get(int): DriverModel
    }

    interface IOrganizationDataAccess {
        +add(OrganizationModel): boolean
        +update(OrganizationModel): boolean
        +delete(OrganizationModel): boolean
        +get(int): OrganizationModel
    }

    interface IPassengerDataAccess {
        +add(PassengerModel): boolean
        +update(PassengerModel): boolean
        +delete(PassengerModel): boolean
        +get(int): PassengerModel
    }

    class UserDataAccess {
    }

    class AdminDataAccess {
    }

    class DriverDataAccess {
    }

    class OrganizationDataAccess {
    }

    class PassengerDataAccess {
    }
}

package ReportDataModel {
    class ReportModel{
        -title: string
        -body: string
        -status: string
    }
    class ExcuseModel {
        -DriverID: int
        -ReportID : int
    }

    class ComplaintModel {
        -UserID: int
        -ReportID: int 
    }
    interface IExcuseDataAccess {
        +add(ExcuseModel): boolean
        +update(ExcuseModel): boolean
        +delete(ExcuseModel): boolean
        +get(int): ExcuseModel
    }

    interface IComplaintDataAccess {
        +add(ComplaintModel): boolean
        +update(ComplaintModel): boolean
        +delete(ComplaintModel): boolean
        +get(int): ComplaintModel
    }

    class ExcuseDataAccess {
    }

    class ComplaintDataAccess {
    }
}

package RouteDataModel {
    class PathModel {
        -StopsID: List<int>
        -TripsID: List<int>
        -start: datetime
        -end: datetime
    }

    class RouteModel {
        -source: string
        -destination: string
        -PathsID: List<int>
    }

    class StopModel {
        -name: string
        -longitude: double
        -latitude: double
    }

    class TripModel {
        -date: datetime
        -busCount: int
        -BusIDs: List<int>
    }

    interface IRouteDataAccess {
        +add(RouteModel): boolean
        +update(RouteModel): boolean
        +delete(RouteModel): boolean
        +get(int): RouteModel
    }

    class RouteDataAccess {
    }

    class BusModel {
        -passengersNumber: string
        -driver: DriverModel
        -vehicleLicense: ImageIcon
        -PassengersID: List<int>
    }
}

package BookingDataModel {
    class BookingModel {
        -passengerID: int
        -bookedTripID: int
    }
}

UserServices <|.. DriverServices
UserServices <|.. OrganizationServices
UserServices <|.. PassengerServices
UserServices <|.. AdminServices

ReportServices <|.. ExcuseServices
ReportServices <|.. ComplaintServices

OrganizationServices o-- PassengerServices

RouteServices "1" *-- "n" PathServices
PathServices "1" o-- "n" TripServices

IUserDataAccess <|.. UserDataAccess
UserDataAccess --> UserModel

IAdminDataAccess <|.. AdminDataAccess
AdminDataAccess --> AdminModel

IComplaintDataAccess <|.. ComplaintDataAccess
ComplaintDataAccess --> ComplaintModel

IDriverDataAccess <|.. DriverDataAccess
DriverDataAccess --> DriverModel

IPassengerDataAccess <|.. PassengerDataAccess
PassengerDataAccess --> PassengerModel

IOrganizationDataAccess <|.. OrganizationDataAccess
OrganizationDataAccess --> OrganizationModel

IExcuseDataAccess <|.. ExcuseDataAccess
ExcuseDataAccess --> ExcuseModel

IRouteDataAccess <|.. RouteDataAccess
RouteDataAccess --> RouteModel

TripModel -o PathModel
PathModel o- StopModel
RouteModel *-- PathModel
TripModel o-- BusModel

UserView <|.. OrganizationView
UserView <|.. AdminView
UserView <|.. PassengerView
UserView <|.. DriverView

RouteView <-- PathView
PathView <-- TripView

ReportView <|.. ExcuseView
ReportView <|.. ComplaintView


UserUI ---> RouteUI
UserUI ---> ReportUI

UserUI ---> UserManagement
RouteUI ---> RouteManagement
ReportUI --> ReportManagement

UserManagement ---> RouteManagement
UserManagement ---> BookingManagement
UserManagement ---> ReportManagement

UserManagement -> UserDataModel
ReportManagement ---> ReportDataModel
RouteManagement ---> RouteDataModel
BookingManagement ---> BookingDataModel

UserDataModel ---> RouteDataModel
UserDataModel ---> BookingDataModel
UserDataModel ---> ReportDataModel
ReportModel  <--- ExcuseModel
ReportModel  <--- ComplaintModel
AdminModel <--- UserModel
DriverModel <--- UserModel
PassengerModel <--- UserModel
OrganizationModel <--- UserModel
@enduml