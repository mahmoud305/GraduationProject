@startuml class-diagram


package UserUI {
    interface UserView {
        +login()
        +showProfile()
        +updateProfile()
    }

    class OrganizationView {
        +Register()
        +createRoute()
        +createPath()
        +createTrip()
        +createPassenger()
        +showAllPassengers()
        ' include suspend, activate and delete
        +showMyRoutes()
        +payMyRoutes()
        +showMyComplaints()
        +ShowAllTrips()
    }

    class AdminView {
        +createDriver()
        +showDrivers()
        ' include suspend, activate and delete
        +showOrganizations()
        ' include suspend, activate and delete
        +showComplaints()
        ' includes handle them
        +showExcuses()
        ' includes handle them
    }

    class PassengerView {
        +showRoutes()
        ' includes show paths, trips and book them
        +showMyBookings()
        +showMyComplaints()
        ' includes making new ones
    }

    class DriverView {
        +createExcuse()
        +showMyExcuses()
    }
}

package RouteUI {
    class TripView {
        +showInfo()
        +showBuses()
    }

    class PathView {
        +showInfo()
        +showTrips()
    }

    class RouteView {
        +showInfo()
        +showPaths()
    }
}

package ReportUI {
    interface ReportView {
        +showInfo()
        +create()
        +ShowAll()
        ' represents the form filled to create a report
    }

    class ComplaintView {
        
    }

    class ExcuseView {
    }
}

package ReportManagement {
    interface ReportServices {
        +store():void
        +retrieve():list<Report>
    }

    class ComplaintServices {
       
    }

    class ExcuseServices {
    }
}

package UserManagement {
    interface UserServices {
        +updateProfile(): void
        +login(): void
    }

    class AdminServices {
        +createDriver(): void
        +suspendDriver(): boolean
        +deleteDriver(): boolean
        +deleteOrganization(): boolean
        +handleComplaint(): void
        +handleExcuse(): void
        +assignDriver(): boolean
    }

    class DriverServices {
        +makeExcuse(): void
    }

    class PassengerServices {
        +joinTrip(): void
        'change his seat or change the bus'
        +modifyBooking(): void
        +cancelBooking(): void
        +makeComplaint(): void
    }

    class OrganizationServices {
        +createOrganization():void
        +createRoute(): void
        +modifyRoute(): void
        +deleteRoute(): void
        +createPassenger(): void
        +suspendPassenger(): void
        +activatePassenger(): void
        +deletePassenger(): void
        'we are decide that the pay for trip not route !!!!!'
        +payForTrip(): boolean
        +createTrip(): boolean
        +showAllTrips():List<Trip>
    }
}

package RouteManagement {
    /'Each route contains multiple paths
    Each route contains source and destination only
    Each path contains multiple stops
    Each path contains multiple trips
    Each trip has one start time'/
    class RouteServices {
        +getTrip(): Trip
        +getAllTrips(): List<Trip>
    }

    class TripServices {
        -bus: Bus
        -startTime: datetime
        +assignDriver(): boolean
        +isCompleted(): boolean
    }

    class PathServices {
        +getAllStops(): List<Stop>
        +addStops(): boolean
    }
}

package BookingManagement {
    class BookingServices {
        +bookTrip()
        +cancelBooking()
    }
}

package UserDataModel {
    class User {
        -name:string
        -email:string
        -password:string
    }

    class Admin {
        -userID:int
    }

    class Passenger {
        -phoneNumber: string
        -userID: int
        -complaintsID: int
        -bookingIDs: List<int>
        ' booked by the passenger
    }

    class Organization {
        -userID:int
        -passengersID: List<int>
        -routesID: List<int>
    }

    class Driver {
        -userID: int
        -nationalID: string
        -drivingLicense: ImageIcon
        -driverImg: string
        -tripIDs: List<int>
        -busID: int
        -ExcusesID:Lit<int>
    }

    interface IUserDataAccess {
        +add(User): boolean
        +update(User): boolean
        +delete(User): boolean
        +get(int): User
    }

    interface IAdminDataAccess {
        +add(Admin): boolean
        +update(Admin): boolean
        +delete(Admin): boolean
        +get(int): Admin
    }

    interface IDriverDataAccess {
        +add(Driver): boolean
        +update(Driver): boolean
        +delete(Driver): boolean
        +get(int): Driver
    }

    interface IOrganizationDataAccess {
        +add(Organization): boolean
        +update(Organization): boolean
        +delete(Organization): boolean
        +get(int): Organization
    }

    interface IPassengerDataAccess {
        +add(Passenger): boolean
        +update(Passenger): boolean
        +delete(Passenger): boolean
        +get(int): Passenger
    }

    class UserDataAccess {
    }

    class AdminDataAccess {
    }

    class DriverDataAccess {
    }

    class OrganizationDataAccess {
    }

    class PassengerDataAccess {
    }
}

package ReportDataModel {
    class Report{
        -title: string
        -body: string
        -status: string
    }
    class Excuse {
        -DriverID: int
        -ReportID : int
    }

    class Complaint {
        -UserID: int
        -ReportID: int 
    }
    interface IExcuseDataAccess {
        +add(Excuse): boolean
        +update(Excuse): boolean
        +delete(Excuse): boolean
        +get(int): Excuse
    }

    interface IComplaintDataAccess {
        +add(Complaint): boolean
        +update(Complaint): boolean
        +delete(Complaint): boolean
        +get(int): Complaint
    }

    class ExcuseDataAccess {
    }

    class ComplaintDataAccess {
    }
}

package RouteDataModel {
    class Path {
        -StopsID: List<int>
        -TripsID: List<int>
        -start: datetime
        -end: datetime
    }

    class Route {
        -source: string
        -destination: string
        -PathsID: List<int>
    }

    class Stop {
        -name: string
        -longitude: double
        -latitude: double
    }

    class Trip {
        -date: datetime
        -busCount: int
        -BusIDs: List<int>
    }

    interface IRouteDataAccess {
        +add(Route): boolean
        +update(Route): boolean
        +delete(Route): boolean
        +get(int): Route
    }

    class RouteDataAccess {
    }

    class Bus {
        -passengersNumber: string
        -DriverID: int
        -vehicleLicense: ImageIcon
        -PassengersID: List<int>
    }
}

package BookingDataModel {
    class Booking {
        -passengerID: int
        -bookedTripID: int
    }
}

UserServices <|.. DriverServices
UserServices <|.. OrganizationServices
UserServices <|.. PassengerServices
UserServices <|.. AdminServices

ReportServices <|.. ExcuseServices
ReportServices <|.. ComplaintServices

OrganizationServices o-- PassengerServices

RouteServices "1" *-- "n" PathServices
PathServices "1" o-- "n" TripServices

IUserDataAccess <|.. UserDataAccess
UserDataAccess --> User

IAdminDataAccess <|.. AdminDataAccess
AdminDataAccess --> Admin

IComplaintDataAccess <|.. ComplaintDataAccess
ComplaintDataAccess --> Complaint

IDriverDataAccess <|.. DriverDataAccess
DriverDataAccess --> Driver

IPassengerDataAccess <|.. PassengerDataAccess
PassengerDataAccess --> Passenger

IOrganizationDataAccess <|.. OrganizationDataAccess
OrganizationDataAccess --> Organization

IExcuseDataAccess <|.. ExcuseDataAccess
ExcuseDataAccess --> Excuse

IRouteDataAccess <|.. RouteDataAccess
RouteDataAccess --> Route

Trip -o Path
Path o- Stop
Route *-- Path
Trip o-- Bus

UserView <|.. OrganizationView
UserView <|.. AdminView
UserView <|.. PassengerView
UserView <|.. DriverView

RouteView <-- PathView
PathView <-- TripView

ReportView <|.. ExcuseView
ReportView <|.. ComplaintView


UserUI ---> RouteUI
UserUI ---> ReportUI

UserUI ---> UserManagement
RouteUI ---> RouteManagement
ReportUI --> ReportManagement

UserManagement ---> RouteManagement
UserManagement ---> BookingManagement
UserManagement ---> ReportManagement

UserManagement -> UserDataModel
ReportManagement ---> ReportDataModel
RouteManagement ---> RouteDataModel
BookingManagement ---> BookingDataModel

UserDataModel ---> RouteDataModel
UserDataModel ---> BookingDataModel
UserDataModel ---> ReportDataModel
Report  <--- Excuse
Report  <--- Complaint
Admin <--- User
Driver <--- User
Passenger <--- User
Organization <--- User
@enduml