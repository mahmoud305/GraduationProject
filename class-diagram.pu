@startuml class-diagram


package UserUI {
    interface UserView {

    }

    class OrganizationView {
        +createRoute()
        +createPath()
        +createTrip()
        +createPassenger()
        +showAllPassengers()
        ' include suspend, activate and delete
        +showPassengers()
        ' include suspend, activate and delete
        +showRoutes()
        +payRoute()
    }

    class AdminView {
        +createDriver()
        +showDrivers()
        ' include suspend, activate and delete
        +showOrganizations()
        ' include suspend, activate and delete
        +showComplaints()
        ' includes handle them
        +showExcuses()
        ' includes handle them
    }

    ' check facebook group chat
    class PassengerView {
        +showRoutes()
        ' includes show paths, trips and book them
        +showMyBookings()
        +showMyComplaints()
        ' includes making new ones
    }

    ' el stops fl path el mfrood mn no3 StopModel
    ' 5aleena fl asasyat
    ' yb2a enta 3ayz class booking
    class DriverView {
        +createExcuse()
        +showMyExcuses()
    }
}

package RouteUI {
    class TripView {

    }

    class RouteView {
        +showPaths()
    }
}

package ReportUI {
    class ComplaintView {

    }

    class ExcuseView {

    }
}


' good idea
package ReportManagement {
    interface Report {
        +store()
        +retrieve()
    }

    class ComplaintServices {
        +store()
        +retrieve()
    }

    class ExcuseServices {
        +store()
        +retrieve()
    }
}

package UserManagement {
    interface UserServices {
        +updateProfile(): void
        +login(): void
    }

    class AdminServices {
        +createDriver(): DriverModel
        +suspendDriver(): boolean
        +deleteDriver(): boolean
        +deleteOrganization(): boolean
        +handleComplaint(): void
        +handleExcuse(): void
        +assignDriver(): boolean
    }

    class DriverServices {
        +makeExcuse(): void
    }

    class PassengerServices {
        +joinTrip(int id): void
        +modifyBooking(int id): void
        +cancelBooking(int id): void
        +makeComplaint(): void
    }

    ' maybe
    class OrganizationServices {
        +createRoute(Route route): void
        +modifyRoute(Route route): void
        +deleteRoute(Route route): void
        +createPassenger(Passenger p): void
        +suspendPassenger(Passenger p): void
        +activatePassenger(Passenger p): void
        +deletePassenger(Passenger p): void
        +payForRoute(Route route): boolean
        +createTrip(Trip trip): boolean
    }
}


' 7araka say3a awiiiiiii
package RouteManagement {
    'Each route contains multiple paths'
    'Each route contains source and destination only'
    'Each path contains multiple stops'
    'Each path contains multiple trips'
    'Each trip has one start time'
    class RouteServices {
        +getTrip(TripModel): boolean
        +getAllTrips(): TripModel[]
    }

    class TripServices {
        -bus: BusModel
        -startTime: datetime
        +assignDriver(BusModel, DriverModel): boolean
        +isCompleted(): boolean
    }

    class PathServices {
        +getAllStops(): boolean
        +addStops(StopModel): boolean
    }
}

' bos 3ade el members dlw2ty 5leena fl packaging
package BookingManagement {
    class BookingServices {
        +bookTrip()
        +cancelBooking()
    }
}


' 7arakt soha
package UserDataModel {
    class UserModel {
        -name:string
        -email:string
    }

    class AdminModel {
        -userModel:UserModel
    }

    ' yes
    class PassengerModel {
        -phoneNumber: string
        -userModel: UserModel
        -complaints: ComplaintModel
        -bookingIDs: int[]
        ' booked by the passenger
    }

    class OrganizationModel {
        -userModel:UserModel
        -passengers: PassengerModel[]
        -routes: RouteModel[]
    }

    ' howa bus id da byt8yr kol ad eh?
    ' eshm3na kol youm
    ' momken yso2 aktar mn marra fl youm
    ' 3ashan 5atrk bs
    class DriverModel {
        -userModel: UserModel
        -nationalID: string
        -drivingLicense: ImageIcon
        -driverImg: string
        -tripIDs: int[]
        -busID: int
        -excuses:Excuse
    }

    interface IUserDataAccess {
        +add(UserModel): boolean
        +update(UserModel): boolean
        +delete(UserModel): boolean
        +get(int): UserModel
    }

    interface IAdminDataAccess {
        +add(AdminModel)
        +update(AdminModel)
        +delete(AdminModel)
        +get(int)
    }

    interface IDriverDataAccess {
        +add(DriverModel)
        +update(DriverModel)
        +delete(DriverModel)
        +get(int)
    }

    interface IOrganizationDataAccess {
        +add(OrganizationModel)
        +update(OrganizationModel)
        +delete(OrganizationModel)
        +get(int)
    }

    interface IPassengerDataAccess {
        +add(PassengerModel)
        +update(PassengerModel)
        +delete(PassengerModel)
        +get(int)
    }

    class UserDataAccess {
        +add(UserModel)
        +update(UserModel)
        +delete(UserModel)
        +get(int)
    }

    class AdminDataAccess {
        +add(AdminModel)
        +update(AdminModel)
        +delete(AdminModel)
        +get(int)
    }

    class DriverDataAccess {
        +add(DriverModel)
        +update(DriverModel)
        +delete(DriverModel)
        +get(int)
    }

    class OrganizationDataAccess {
        +add(OrganizationModel)
        +update(OrganizationModel)
        +delete(OrganizationModel)
        +get(int)
    }

    class PassengerDataAccess {
        +add(PassengerModel)
        +update(PassengerModel)
        +delete(PassengerModel)
        +get(int)
    }
}

package ReportDataModel {
    class ExcuseModel {
        -driver: DriverModel
        -title: string
        -body: string
        -status: string
    }

    class ComplaintModel {
        -user: UserModel
        -title: string
        -body: string
    }

    interface IExcuseDataAccess {
        +add(ExcuseModel)
        +update(ExcuseModel)
        +delete(ExcuseModel)
        +get(int)
    }

    interface IComplaintDataAccess {
        +add(ComplaintModel)
        +update(ComplaintModel)
        +delete(ComplaintModel)
        +get(int)
    }

    class ExcuseDataAccess {
        +add(ExcuseModel)
        +update(ExcuseModel)
        +delete(ExcuseModel)
        +get(int)
    }

    class ComplaintDataAccess {
        +add(ComplaintModel)
        +update(ComplaintModel)
        +delete(ComplaintModel)
        +get(int)
    }
}

package RouteDataModel {
    class PathModel {
        -stops: Stop[]
        -trips: Trip[]
        -start: datetime
        -end: datetime
    }

    class RouteModel {
        -source: string
        -destination: string
        -paths: Path[]
    }

    class StopModel {
        -name: string
        -longitude: double
        -latitude: double
    }

    class TripModel {
        -date: datetime
        -busCount: int
        -busIDs: int[]
    }

    interface IRouteDataAccess {
        +add(RouteModel)
        +update(RouteModel)
        +delete(RouteModel)
        +get(int)
    }

    class RouteDataAccess {
        +add(RouteModel)
        +update(RouteModel)
        +delete(RouteModel)
        +get(int)
    }

    class BusModel {
        -passengersNumber: int
        -driver: DriverModel
        -vehicleLicense: ImageIcon
        -passengers: PassengerModel[]
    }
}

' daloo3t el models
package BookingDataModel {
    class BookingModel {
        -passengerID: int
        -bookedTripID: int
    }
}

UserServices <|.. DriverServices
UserServices <|.. OrganizationServices
UserServices <|.. PassengerServices
UserServices <|.. AdminServices

Report <|.. ExcuseServices
Report <|.. ComplaintServices

OrganizationServices o-- PassengerServices

RouteServices "1" o-- "n" PathServices
PathServices "1" o-- "n" TripServices

IUserDataAccess <|.. UserDataAccess
IUserDataAccess o-- UserModel

IAdminDataAccess <|.. AdminDataAccess
IAdminDataAccess o-- AdminModel

IComplaintDataAccess <|.. ComplaintDataAccess
IComplaintDataAccess o-- ComplaintModel

IDriverDataAccess <|.. DriverDataAccess
IDriverDataAccess o-- DriverModel

IPassengerDataAccess <|.. PassengerDataAccess
PassengerDataAccess o-- PassengerModel

IOrganizationDataAccess <|.. OrganizationDataAccess
IOrganizationDataAccess --> OrganizationModel

IExcuseDataAccess <|.. ExcuseDataAccess
IExcuseDataAccess o-- ExcuseModel

IRouteDataAccess <|.. RouteDataAccess
IRouteDataAccess o-- RouteModel

TripModel --o PathModel
PathModel o-- StopModel

UserView <|.. OrganizationView
UserView <|.. AdminView
UserView <|.. PassengerView
UserView <|.. DriverView

RouteView -- TripView


UserUI --> RouteUI
UserUI --> ReportUI

UserUI ---> UserManagement
RouteUI ---> RouteManagement
ReportUI ---> ReportManagement

UserManagement --> RouteManagement
UserManagement --> BookingManagement
UserManagement --> ReportManagement

UserManagement ---> UserDataModel
ReportManagement ---> ReportDataModel
RouteManagement ---> DataModel
BookingManagement ---> BookingDataModel

UserDataModel --> RouteDataModel
UserDataModel --> BookingDataModel
UserDataModel --> ReportDataModel

@enduml