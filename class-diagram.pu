@startuml class-diagram

class Notification {
    -id: int
    -email: String
    -subject: String
    -body: String
    +setTitle(String title): void
    +getTitle(): String
    +getBody(): String
    +setBody(String body): void
}

class Driver {
    -busID: int[]
    -name: String
    -nationalID: String
    -drivingLicense: ImageIcon
    -trips: Trip[]
    -execuses: Execuse[]
    +Driver(int busID)
    +showTripsInfo(): void
    +makeExcuse(Excuse excuse): void
    +showAllExecuses(): Execuse[]
}

class Excuse {
    -driver: Driver
    -title: String
    -body: String
    -status: String
    +getDriver(): User
    +setDriver(Driver driver): boolean
    +setTitle(String title): void
    +getTitle(): String
    +getBody(): String
}

class User {
    #username: String
    #email: String
    #password: String
    +makeComplaint(Complaint Complaint): void
    +updateProfile(): void
    +login(): void
}

class Bus {
    -id: int
    -passengersNumber: int
    -driver: Driver
    -vehicleLicense: ImageIcon
    -passengers: Passenger[]
    +isFull(): boolean
    +assignDriver(Driver driver): boolean
}

class Organization {
    -passengers: Passenger[]
    -routes: Route[]
    -extendBookingTime(Trip trip): boolean
    +handleRequests(): void
    +createRoute(Route route): void
    +payForTrip(Trip trip): void
    +showAllRoutes(): void
    +showAllTrips(): Trip[]
    +deleteRoute(): boolean
    +showAllPassengers(): Passenger[]
    +createPassengerAccount(Passenger p): void
    +deletePassengerAccount(Passenger p): void
    +activatePassengerAccount(Passenger p): void
    +suspendPassengerAccount(Passenger p): void
    +payForRoute(Route route): boolean
    +createTrip(Trip trip): boolean
    +createTrip(): Trip
}

class Complaint {
    -user: User
    -title: String
    -body: String
    +getUser(): User
    +setUser(User user): boolean
    +setTitle(String title): void
    +getTitle(): String
    +getBody(): String
    +setBody(String body): void
}

class UserModel {
    +add(User)
    +update(User)
    +delete(User)
    +get(id)
}

class Passenger {
    +showAllTrips(): Trip[]
    +joinTrip(): void
    +cancelBooking(Trip trip): void
    +joinTrip(Trip trip): void
}
'Each route contains multiple paths'
'Each route contains source and destination only'
'Each path contains multiple stops'
'Each path contains multiple trips'
'Each trip has one start time'

class Route {
    -id: int
    -source: String
    -destination: String
    -trips: Trip[]
    
    +getTrip(Trip trip): boolean
    +getAllTrips(): Trip[]
}

class Trip {
    -id: int
    -buses: Bus[]
    -path: Path[]
    -startTime: Time
    +assignDriver(Bus, Driver): boolean
    +isCompleted(): boolean
}
''
class Path {
    -stops: Stop[]
    +getAllStops(): boolean
    +addStops(Stop stop): boolean
}

class Stop {
    -longitude: double
    -latitude: double
}

class NotificationModel {
    +add(Notification)
    +update(Notification)
    +delete(Notification)
    +get(id)
}

class ExcuseModel {
    +add(Complaint)
    +update(Complaint)
    +delete(Complaint)
    +get(id)
}

class RouteModel {
    +add(Route)
    +update(Route)
    +delete(Route)
    +get(id)
}

class ComplaintModel {
    +add(Complaint)
    +update(Complaint)
    +delete(Complaint)
    +get(id)
}

class Admin {
    +createDriverAccount(): Driver
    +deleteDriverAccount(): boolean
    +handleComplaint(): boolean
    +handleExcuse(Excuse excuse): boolean
    +showAllDrivers(): Driver[]
}

Driver o-- Trip

Excuse <-- Driver

User <|-- Driver
User <|-- Organization
User <|-- Passenger

Bus o-- Passenger
Bus o-- Driver

Organization o-- Passenger

Complaint <-- User

UserModel <-- Admin
UserModel <-- User

Route "1" o-- "n" Trip
Trip "1" o-- "1" Path
Route <-- Organization

Trip "1" o-- "n" Bus

Path "1" *-- "n" Stop

ExcuseModel <-- Admin
ExcuseModel <-- Driver

Route <-- RouteModel
RouteModel <-- Organization

ComplaintModel <-- User
ComplaintModel <-- Admin

@enduml