@startuml class-diagram

class Notification {
    -id: int
    -email: String
    -subject: String
    -body: String
    +setTitle(String title): void
    +getTitle(): String
    +getBody(): String
    +setBody(String body): void
}

class AutomationSystem {
    -sendNotification(Notification, User): boolean
    +verifyTrip(Trip): boolean
    +resetPassword(User): boolean
    +verifyOrganiztion(Orgranization): boolean
    +assignDrivers(Trip): boolean
}

class SystemManager {
    #service: DataService
}
class Driver {
    -busID: int[]
    -name: String
    -nationalID: String
    -drivingLicense: ImageIcon
    -trips: Trip[]
    -execuses: Execuse[]
    +Driver(int busID)
    +showTripsInfo(): void
    +makeExcuse(Excuse excuse): void
    +showAllExecuses(): Execuse[]
}

class Excuse {
    -driver: Driver
    -title: String
    -body: String
    -status: String
    +getDriver(): User
    +setDriver(Driver driver): boolean
    +setTitle(String title): void
    +getTitle(): String
    +getBody(): String
}

class User {
    #username: String
    #email: String
    #password: String
    +makeComplain(Complain complain): void
    +updateProfile(): void
    +login(): void
}

class Bus {
    -id: int
    -passengersNumber: int
    -driver: Driver
    -vehicleLicense: ImageIcon
    -passengers: Passenger[]
    +isFull(): boolean
    +assignDriver(Driver driver): boolean
}

class Organization {
    -passengers: Passenger[]
    -routes: Route[]
    -extendBookingTime(Trip trip): boolean
    +handleRequests(): void
    +createRoute(Route route): void
    +payForTrip(Trip trip): void
    +showAllRoutes(): void
    +showAllTrips(): Trip[]
    +deleteRoute(): boolean
    +showAllPassengers(): Passenger[]
    +createPassengerAccount(Passenger p): void
    +deletePassengerAccount(Passenger p): void
    +activatePassengerAccount(Passenger p): void
    +suspendPassengerAccount(Passenger p): void
    +payForRoute(Route route): boolean
    +createTrip(Trip trip): boolean
    +createTrip(): Trip
}

class Complaint {
    -user: User
    -title: String
    -body: String
    +getUser(): User
    +setUser(User user): boolean
    +setTitle(String title): void
    +getTitle(): String
    +getBody(): String
    +setBody(String body): void
}

class UserService {
    +add(User)
    +update(User)
    +delete(User)
    +get(id)
}

class Passenger {
    +showAllTrips(): Trip[]
    +joinTrip(): void
    +cancelBooking(Trip trip): void
    +joinTrip(Trip trip)
}

class Route {
    -id: int
    -trips: Trip[]
    -path: Path
    +getTrip(Trip trip): boolean
    +getAllTrips(): Trip[]
}

class Trip {
    -id: int
    -buses: Bus[]
    -startTime: Time
    +assignDriver(Bus, Driver): boolean
    +isCompleted(): boolean
}

class Path {
    -stops: Stop[]
    +getAllStops(): boolean
    +addStops(Stop stop): boolean
}

class Stop {
    -longitude: double
    -latitude: double
}

class NotificationService {
    +add(Notification)
    +update(Notification)
    +delete(Notification)
    +get(id)
}

class ExcuseService {
    +add(Complain)
    +update(Complain)
    +delete(Complain)
    +get(id)
}

class DataService {
    #database: DatabaseInstance
}

class RouteService {
    +add(Route)
    +update(Route)
    +delete(Route)
    +get(id)
}

class ComplaintService {
    +add(Complain)
    +update(Complain)
    +delete(Complain)
    +get(id)
}

class Admin {
    +createDriverAccount(): Driver
    +deleteDriverAccount(): boolean
    +handleComplain(): boolean
    +handleExcuse(Excuse excuse): boolean
    +showAllDrivers(): Driver[]
}

Notification <-- AutomationSystem

AutomationSystem <-- Driver
AutomationSystem <-- Organization

SystemManager <|-- Admin
SystemManager <|-- AutomationSystem

Driver o-- Trip

Excuse <-- Driver

User <|-- Driver
User <|-- Organization
User <|-- Passenger

Bus o-- Passenger
Bus o-- Driver

Organization o-- Passenger

Complaint <-- User

UserService <-- Admin
UserService <-- User

Route "1" o-- "1" Path
Route "1" o-- "n" Trip
Route <-- Organization

Trip "1" o-- "n" Bus

Path "1" *-- "n" Stop

NotificationService <-- AutomationSystem

ExcuseService <-- Admin
ExcuseService <-- Driver

DataService <|-- NotificationService
DataService <|-- RouteService
DataService <|-- ExcuseService
DataService <|-- UserService
DataService <|-- ComplaintService

RouteService <-- Admin
RouteService <-- Organization

ComplaintService <-- User
ComplaintService <-- Admin

@enduml